<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
         				http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         				http://www.springframework.org/schema/aop
         				http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         				http://www.springframework.org/schema/cache
         				http://www.springframework.org/schema/cache/spring-cache.xsd
         				">
	<!-- 自动扫描 -->
	<context:component-scan base-package="xn.*.service*" />
	<!--redis 配置类加载 -->
	<!-- <context:component-scan base-package="com.org.redisconfig" /> -->
	<!--开启缓存 -->
	<!-- <cache:annotation-driven /> -->
	<!-- <mvc:annotation-driven /> -->
	<!-- 引入配置文件 -->
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<!-- <property name="location" value="classpath:jdbc.properties" /> -->
	<!-- <property name="location" value="classpath:redis.properties" /> -->
	<!-- </bean> -->
	
	<!-- Spring 工具类 -->
	<bean id="springContextUtil" class="xn.core.util.SpringContextUtil" />
	<bean class="xn.core.util.SpringContextRegister"/>
	<bean class="xn.core.exception.BaseExceptionHandler"/>
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
				<!-- <value>classpath:redis.properties</value> -->
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	
	<!-- <context:property-placeholder location="classpath:redis.properties"/> -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
       
        <!-- 连接被泄露时是否打印 -->  
        <property name="logAbandoned" value="true"/>  
        <!--removeAbandoned: 是否自动回收超时连接-->    
        <property name="removeAbandoned"  value="true"/>  
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
        <property name="removeAbandonedTimeout" value="180"/>  
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>  
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="10"/>  
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
        <property name="minEvictableIdleTimeMillis" value="10000"/>  
		
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:xn/*/mapper/*/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- <property name="typeAliasesPackage" value="classpath:xn/pigfarm/model/*" /> -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper"></bean>
			</array>
		</property>
	</bean>

	<!--spring 整合 mapper -->
<!-- 	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer"> -->
<!-- 		<property name="basePackage" value="xn.pigfarm.mapper" /> -->
<!-- 		<property name="markerInterface" value="util.MyMapper" /> -->
<!-- 	</bean> -->

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- <aop:aspectj-autoproxy /> -->
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="xn.*.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (配置事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--设置事务 -->
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="edit*"  propagation="REQUIRED"  rollback-for="java.lang.Exception" />
			<tx:method name="delete*"  propagation="REQUIRED"  rollback-for="java.lang.Exception" />
			<tx:method name="insert*"  propagation="REQUIRED"  rollback-for="java.lang.Exception" /> 
			<!-- 存储过程工单处理的事物 -->
			<tx:method name="execute*"  propagation="REQUIRED"  rollback-for="java.lang.Exception" /> 
		</tx:attributes>
	</tx:advice>

	<!--添加事务 -->
	<aop:config>
		<!-- 在service层切入事务 -->
		<aop:pointcut expression="execution(public * xn.*.service.*.* (..)) or execution(public * xn.*.service.*.*.* (..)) " id="xnservice" />
		<aop:advisor pointcut-ref="xnservice" advice-ref="userTxAdvice" />
	</aop:config>

	<!--redis-spring 配置 -->
	<!-- <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> -->
	<!-- <property name="maxIdle" value="${redis.maxIdle}" /> -->
	<!-- <property name="maxActive" value="${redis.maxTotal}" /> -->
	<!-- <property name="maxWait" value="${redis.maxWaitMillis}" /> -->
	<!-- <property name="testOnBorrow" value="${redis.testOnBorrow}" /> -->
	<!-- </bean> -->

	<!-- <bean id="jedisConnectionFactory" -->
	<!-- class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> -->
	<!-- <property name="hostName" value="${redis.host}" /> -->
	<!-- <property name="port" value="${redis.port}" /> -->
	<!-- <property name="database" value="${redis.default.db}" /> -->
	<!-- <property name="password" value="${redis.password}" /> -->
	<!-- <property name="usePool" value="${redis.usePool}" /> -->
	<!-- <property name="timeout" value="${redis.timeout}" /> -->
	<!-- <property name="poolConfig" ref="poolConfig" /> -->
	<!-- </bean> -->

	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" -->
	<!-- p:connection-factory-ref="jedisConnectionFactory"> -->
	<!-- <property name="keySerializer"> -->
	<!-- <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> -->
	<!-- </property> -->
	<!-- <property name="hashKeySerializer"> -->
	<!-- <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> -->
	<!-- </property> -->
	<!-- <property name="valueSerializer"> -->
	<!-- <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" 
		/> -->
	<!-- </property> -->
	<!-- <property name="hashValueSerializer"> -->
	<!-- <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" 
		/> -->
	<!-- </property> -->
	<!-- <property name="connectionFactory" ref="connectionFactory" /> -->
	<!-- </bean> -->


	<!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" -->
	<!-- c:template-ref="redisTemplate"> -->
	<!-- </bean> -->
	<!-- freemarker配置 -->
	<!-- <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> 
		<property name="templateLoaderPath" value="/WEB-INF/jsp/" /> <property name="freemarkerSettings"> 
		<props> <prop key="template_update_delay">0</prop> <prop key="default_encoding">UTF-8</prop> 
		<prop key="number_format">0.##########</prop> <prop key="datetime_format">yyyy-MM-dd 
		HH:mm:ss</prop> <prop key="classic_compatible">true</prop> <prop key="template_exception_handler">ignore</prop> 
		</props> </property> </bean> -->

</beans>  